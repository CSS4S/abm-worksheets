---
title: "R Skills Worksheet 1: Agents, Networks, and Notebooks"
date: April 2, 2025
format: html
---

## Getting Started with R and RStudio

### Install the course package

Before you begin, make sure you’ve installed R and RStudio. We’ll also use a GitHub-hosted package that includes code and templates for this course. This means we will need to have Git installed to enable our computer to access the code on the GitHub servers. Please navigate here to download the Git installer: <https://git-scm.com>.

```{r}
options(repos = c(CRAN = "https://cloud.r-project.org"))
# install.packages("ggnetwork")
# install.packages("pak")  # if you don’t already have it; comment out after installation
# pak::pak("css4s/socmod")  # ditto
```

### Load the packages

```{r}
library(socmod)
library(ggnetwork)
library(ggplot2)
```

## Quick example using `socmod` for agent-based modeling

Here we will do a quick-start example of how to use `socmod` to make sure everything installed as we expected, and to demonstrate the connection between some theory we covered Monday with the code we'll be working with in this class.

We are going to consider the following situation where Agent 1 is considering installing residential solar (@fig-solar). Blue lines between agents indicates they are socially acquainted enough to learn from one another, i.e., they are socially connected in a social network.

![](first-example-sketch.png){#fig-solar width="800"}

```{r}
# Create agents...
# Agent 1 is the focal agent, neighbors 2–4 have different wealth levels (fitness), indicated by the number of dollar symbols each agent has in the drawing.

# We call solar panels here "Adaptive" and not using solar panels the "Legacy" behavior to emphasize the generality of our results.

agent_1 <- Agent$new(behavior = "Legacy", fitness = 1, name = "1")  
agent_2 <- Agent$new(behavior = "Adaptive", fitness = 4, name = "2")  
agent_3 <- Agent$new(behavior = "Legacy", fitness = 1, name = "3")  
agent_4 <- Agent$new(behavior = "Legacy", fitness = 2, name = "4")  
```

```{r}
print(agent_2)
```

### Create a social network

```{r}
library(igraph)

# Create graph with formula syntax: 1 connected to 2, 3, 4; 3 connected to 4
socnet <- make_graph(~ 1-2, 1-3, 1-4, 3-2)
# Vertex names are automatically assigned as character strings: "1", "2", etc.
print(V(socnet)$name)

```

```{r}
# Visualize network with base igraph plot.
plot(socnet)
```

### Combine agents and network into a model

```{r}
agents <- list(agent_1, agent_2, agent_3, agent_4)
abm <- AgentBasedModel$new(agents = agents, network = socnet)

ggnetplot(abm$network) + 
  geom_edges(linewidth=0.1) + 
  geom_nodes(color = "#008566", size=4) + 
  geom_nodelabel_repel(aes(label = name), size = 2) + 
  theme_blank()   

```

### Success-biased learning

Now that we've seen how to initialize an agent-based model, let's make a cell with all the initialization steps together, then run the model using success-biased learning.

```{r}
# Focal agent.
agent_1 <- Agent$new(behavior = "Legacy", fitness = 1, name = "1")  
# Focal agent neighbors.
agent_2 <- Agent$new(behavior = "Adaptive", fitness = 4, name = "2")  
agent_3 <- Agent$new(behavior = "Legacy", fitness = 1, name = "3")  
agent_4 <- Agent$new(behavior = "Legacy", fitness = 2, name = "4")  

agents <- list(agent_1, agent_2, agent_3, agent_4)

socnet <- make_graph(~ 1-2, 1-3, 1-4, 3-2)
abm <- AgentBasedModel$new(agents = agents, network = socnet)
result <- run(abm, 10, success_bias_select_teacher,
              success_bias_interact, iterate_learning_model)

# Analyze outputs. socmod automatically adds a `t` and `A` column
# to the output "tibble". 

print(result$output)

ggplot(result$output, aes(x=t, y=A)) + 
  geom_line() + 
  xlab("Time step") +
  ylab("# Adaptive") +
  theme_classic()
```

## Talking Agents Example

Agents are *objects*, which is a comptuer science term for a template for a collection of data and functions.

Unlike Python, C++, Java, and many other languages, R has no built-in library R6 is an object-oriented system for R that allows for defining classes and methods in a way similar to Python. This gives you more explicit control over encapsulation and inheritance compared to R’s S3/S4 systems.

In the example below, we extend the `Agent` class using R6 to create a `HelloAgent` that can talk to another agent by name.

```{r}
library(R6)

HelloAgent <- R6::R6Class("HelloAgent",
  inherit = Agent,
  public = list(
    say_hello = function(to_agent) {
      cat(self$name, "says hello to", to_agent$name, "\n")
    }
  )
)

agents <- list(
  HelloAgent$new(name = "Barto", behavior = "Friendly", fitness = 1),
  HelloAgent$new(name = "João", behavior = "Friendly", fitness = 1),
  HelloAgent$new(name = "Maria", behavior = "Friendly", fitness = 1),
  HelloAgent$new(name = "Marta", behavior = "Friendly", fitness = 1),
  HelloAgent$new(name = "Zé Luis", behavior = "Friendly", fitness = 1)
)

socnet <- make_ring(length(agents))
V(socnet)$name <- sapply(agents, function(a) a$name)

abm <- AgentBasedModel$new(agents = agents, network = socnet)

partner_select <- function(agent, model) {
  neighbors <- neighbors(model$network, agent$name)
  if (length(neighbors) == 0) return(NULL)
  neighbor_name <- sample(V(model$network)[neighbors]$name, 1)
  model$get_agent(neighbor_name)
}

interact <- function(agent, partner, model) {
  if (!is.null(partner)) {
    agent$say_hello(partner)
  }
}

socmod::run(
  model = abm,
  partner_select = partner_select,
  interact = interact,
  max_its = 10
)
```

### Exercise: have HelloAgents say something different if their behavior is "Grouchy" and not "Friendly".

Copy/paste the code above into the code block below then edit.

```{r}

```

